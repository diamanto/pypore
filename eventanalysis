#!/usr/bin/env python
# -*- coding: utf8 -*-

'''

This program is for finding events in files and displaying the results.
'''
import sys
from PyQt4 import QtGui, QtCore, Qt
import PyQt4.Qwt5 as Qwt
from DataFileOpener import openData
from scipy import fft, arange, signal
import scipy.io as sio
import numpy as np


class PlotThread(QtCore.QThread):
    def __init__(self, axes, datadict='', plot_range='all', filename='',
                 threshold_type='adaptive', a=0.93,
                 threshold_direction='negative', min_event_length=10., max_event_length=1000.):
        QtCore.QThread.__init__(self)
        self.plot_options = {'axes': axes, 'datadict': datadict, 'plot_range': plot_range}
        self.filename = filename
        self.threshold_type = threshold_type
        self.filter_parameter = a
        self.threshold_direction = threshold_direction
        self.min_event_length = min_event_length
        self.max_event_length = max_event_length
    
    def __del__(self):
        '''
        If the object instantiating this thread gets deleted, the thread will be deleted, causing
        filter_parameter segfault, unless we implement this destructor.
        '''
        self.wait()
    
    def run(self):
        if not self.filename == '' or self.plot_options['datadict'] == '':
            self.plot_options['datadict'] = openData(self.filename)
        self.emit(QtCore.SIGNAL('plotData(PyQt_PyObject)'), {'plot_options': self.plot_options, 'status_text': ''})
        

class AnalyzeDataThread(QtCore.QThread):
    '''
    Class for searching for events in filter_parameter separate thread.  
    '''
    def __init__(self, parameters):
#     def __init__(self, axes, filename='', threshold_type='adaptive', filter_parameter=0.93,
#                  threshold_direction='negative', min_event_length=10., max_event_length=1000.):
        QtCore.QThread.__init__(self)
        self.parameters = parameters
    
    def __del__(self):
        '''
        If the object instantiating this thread gets deleted, the thread will be deleted, causing
        filter_parameter segfault, unless we implement this destructor.
        '''
        self.wait()
    
    def run(self):
        '''
        Finds all the events in 'data'.
        
        Parameters: 
          datadict - must have data in 'data', sample rate in 'SETUP_ADCSAMPLERATE'
          threshold_type - 'adaptive' for adaptive-based threshold
                         - 'current' for current based TODO
          filter_parameter - filter parameter for 'noise'. Should be close to 1, less than 1. nA for 'current'
          threshold_direction - 'positive' or 'negative' or 'both'
          min_event_length - in microseconds
          max_event_length - in microseconds
          
        Returns:
          Struct containing all events found events
          
        '''
        self.plot_options = {}
        self.plot_options['axes'] = self.parameters['axes']
        if not self.parameters['filename'] == '' or self.plot_options['datadict'] == '':
            self.plot_options['datadict'] = openData(self.parameters['filename'])
        data = self.plot_options['datadict']['data']
        sample_rate = self.plot_options['datadict']['SETUP_ADCSAMPLERATE'][0][0]
        timestep = 1 / sample_rate
        
        # Min and Max number of points in an event
        min_event_steps = int(self.parameters['min_event_length'] * 1e-6 / timestep)
        max_event_steps = int(self.parameters['max_event_length'] * 1e-6 / timestep)
        
        # Threshold direction.  -1 for negative, 0 for both, +1 for positive
        directionPositive = False
        directionNegative = False
        if self.parameters['threshold_direction'] == 'Positive':
            directionPositive = True
        elif self.parameters['threshold_direction'] == 'Negative':
            directionNegative = True
        elif self.parameters['threshold_direction'] == 'Both':
            directionNegative = True
            directionPositive = True
            
        print 'pos:', directionPositive, 'neg:', directionNegative
        
        
        n = len(data)
        
        if n < 100:
            return 'Not enough datapoints in file.'
        
        local_mean = data[0]
        local_variance = 0.
        start_stddev = self.parameters['start_stddev']  # Starting threshold parameter
        end_stddev = self.parameters['end_stddev']  # Ending threshold parameter
        filter_parameter = self.parameters['filter_parameter'] # filter parameter 'a'
        
        # distance from mean to define an event
        threshold = data[0]
        
        i = 100
        # initialize mean/variance with first i datapoints
        for k in range(0, i):
            local_mean = filter_parameter * local_mean + (1 - filter_parameter) * data[k]
            local_variance = filter_parameter * local_variance + (1 - filter_parameter) * (data[k] - local_mean) ** 2
            threshold = start_stddev * local_variance ** .5
        
        save_file = {}
        save_file['Events'] = []
        
        n = len(data)
        event_count = 0
        isEvent = False
        wasEventPositive = False # Was the event an up spike?
        # search for events.  Keep track of filter_parameter filtered local (adapting!) mean and variance,
        # and use them to decide filter_parameter threshold for events.  See
        # http://pubs.rsc.org/en/content/articlehtml/2012/nr/c2nr30951c for more details.
        while i < n:
            # could this be an event?
            event_start = 0
            event_end = 0
            # Detecting a negative event
            if (directionNegative and data[i] < local_mean - threshold):
                isEvent = True
                wasEventPositive = False
            # Detecting a positive event
            elif (directionPositive and data[i] > local_mean + threshold):
                isEvent = True
                wasEventPositive = True
            if isEvent:
                isEvent = False
                # Set ending threshold
                threshold = end_stddev * local_variance ** .5 
                event_start = i
                done = False
                event_i = i
                # loop until event ends
                while not done and event_i - event_start < max_event_steps:
                    event_i = event_i + 1
                    print event_i
                    if (not wasEventPositive and data[event_i] > local_mean - threshold) or (wasEventPositive and data[event_i] < local_mean + threshold):
                        event_end = event_i - 1
                        done = True
                        break
                # is the event long enough?
                if event_end - event_start > min_event_steps:
                    i = event_end
                    if i == 0:
                        i = i + max_event_length
                    self.plot_options['plot_range'] = [event_start - 50, event_end + 50]
                    self.plot_options['show_event'] = True
                    event = {}
                    event['event_data'] = data[event_start:event_end]
                    event['raw_data'] = data[event_start - 50 : event_end + 50]
                    event['baseline'] = local_mean
                    event['delta'] = np.mean(event['event_data'])
                    event['event_start'] = event_start
                    event['event_end'] = event_end
                    event['raw_points_per_side'] = 50
                    event['sample_rate'] = sample_rate
                    self.emit(QtCore.SIGNAL('_analyze_data_thread_callback(PyQt_PyObject)'), {'plot_options': self.plot_options, 'event': event})
                    save_file['Events'].append(event)
                    event_count = event_count + 1
            local_mean = filter_parameter * local_mean + (1 - filter_parameter) * data[i]
            local_variance = filter_parameter * local_variance + (1 - filter_parameter) * (data[i] - local_mean) ** 2
            threshold = start_stddev * local_variance ** .5 
            i = i + 1
            if i % 50000 == 0:
                self.emit(QtCore.SIGNAL('_analyze_data_thread_callback(PyQt_PyObject)'), {'status_text': 'Event Count: ' + str(event_count) + ' Percent Done: ' + str(100.*i / n)})
        if event_count > 0:
            save_file_name = list(self.filename)
            # Remove the .mat off the end
            for i in range(0, 4):
                save_file_name.pop()
                
            save_file_name.append('_Events.mat')
            save_file['filename'] = "".join(save_file_name)
            save_file['sample_rate'] = sample_rate
            save_file['event_count'] = event_count
            sio.savemat(save_file['filename'], save_file)
            
        self.emit(QtCore.SIGNAL('_analyze_data_thread_callback(PyQt_PyObject)'), {'status_text': 'Done. Found ' + str(event_count) + ' events.', 'done': True})  
  
    
class MyApp(QtGui.QMainWindow):
    
    def __init__(self, parent=None):
        super(MyApp, self).__init__()
        
        self.threadPool = []
        
        self.setWindowTitle('Translocation Event Analysis')
        
        self.create_menu()
        self.create_main_frame()
        self.create_status_bar()
        
        self.__initZooming()
#         self.showMaximized()
        
    def __initZooming(self):
        """Initialize zooming
        """

        self.zoomer = Qwt.QwtPlotZoomer(Qwt.QwtPlot.xBottom,
                                        Qwt.QwtPlot.yLeft,
                                        Qwt.QwtPicker.DragSelection,
                                        Qwt.QwtPicker.AlwaysOff,
                                        self.plot.canvas())
        self.zoomer.setRubberBandPen(Qt.QPen(Qt.Qt.black))
        
    def open_files(self):
        '''
        Opens file dialog box, adds names of files to open to list
        '''
        self.listWidget.clear()

        fnames = QtGui.QFileDialog.getOpenFileNames(self, 'Open file', 'data')
        areFilesOpened = False
        for w in fnames:
            areFilesOpened = True
            item = QtGui.QListWidgetItem(w)
            self.listWidget.addItem(item)
            
        if areFilesOpened:
            self.analyze_button.setEnabled(False)

    def _on_file_item_selection_changed(self):
        self.analyze_button.setEnabled(True)
        
    def _on_file_item_doubleclick(self, item):
        '''
        Called when filter_parameter file list item is double clicked.
        Starts the plotting thread, which opens the file, parses data, then passes to plotData
        '''
        # adding by emitting signal in different thread
        self.status_text.setText('Plotting...')
        self.threadPool.append(PlotThread(self.plot, filename=str(item.text())))
        self.connect(self.threadPool[len(self.threadPool) - 1], QtCore.SIGNAL('plotData(PyQt_PyObject)'), self._on_file_item_doubleclick_callback)
        self.threadPool[len(self.threadPool) - 1].start()
        
    def _on_file_item_doubleclick_callback(self, results):
        if 'plot_options' in results:
            self.plotData(results['plot_options'])
        if 'status_text' in results:
            self.status_text.setText(results['status_text'])
        
        
    def create_main_frame(self):
        '''
        Initializes the main gui frame.
        '''
        self.main_frame = QtGui.QWidget()
        
        # Put everything in filter_parameter scroll area
        scrollArea = QtGui.QScrollArea()
        scrollArea.setWidgetResizable(True)
        
        # Create Qwt plot
        self.plot = Qwt.QwtPlot(self)
        self.plot.setCanvasBackground(QtCore.Qt.white)
        self.plot.setMinimumSize(400, 200)
        self.plot.setAxisTitle(Qwt.QwtPlot.xBottom, 'Time')
        self.plot.setAxisTitle(Qwt.QwtPlot.yLeft, 'Current')
        self.plot.setTitle('Current Trace')
        
        # Create Qwt plot for concatenated events
        self.plot_concatevents = Qwt.QwtPlot(self)
        self.plot_concatevents.setCanvasBackground(QtCore.Qt.white)
        self.plot_concatevents.setMinimumSize(400, 200)
        self.plot_concatevents.setAxisTitle(Qwt.QwtPlot.xBottom, 'Time')
        self.plot_concatevents.setAxisTitle(Qwt.QwtPlot.yLeft, 'Current')
        self.plot_concatevents.setTitle('Concatenated Events')
        
        # Create filter_parameter list for files want to analyze
        self.listWidget = QtGui.QListWidget()
        self.listWidget.itemSelectionChanged.connect(self._on_file_item_selection_changed)
        self.listWidget.itemDoubleClicked.connect(self._on_file_item_doubleclick)
        self.listWidget.setMaximumHeight(50)
        
        # Other GUI controls
        # 
        self.analyze_button = QtGui.QPushButton("&Analyze")
        self.connect(self.analyze_button, QtCore.SIGNAL('clicked()'), self.on_analyze)
        self.analyze_button.setEnabled(False)
        
        self.stop_analyze_button = QtGui.QPushButton("&Stop")
        self.connect(self.stop_analyze_button, QtCore.SIGNAL('clicked()'), self.on_analyze_stop)
        self.stop_analyze_button.setEnabled(False)
        
        self.tab_widget = QtGui.QTabWidget()
        self.tab_widget.setMinimumSize(450, 250)
        self.plot_event_zoomed = Qwt.QwtPlot(self)
        self.plot_event_zoomed.setCanvasBackground(QtCore.Qt.white)
        self.plot_event_zoomed.setAxisTitle(Qwt.QwtPlot.xBottom, 'Time')
        self.plot_event_zoomed.setAxisTitle(Qwt.QwtPlot.yLeft, 'Current')
        tab2 = QtGui.QWidget()
        
        # Create event zoom in in tab
        
        self.tab_widget.addTab(self.plot_event_zoomed, "Display Data")
        self.tab_widget.addTab(tab2, "Filter and Histogram")
        
        filesLabel = QtGui.QLabel()
        filesLabel.setText('Files:')
        
        hboxfiles = QtGui.QHBoxLayout()
        hboxfiles.addWidget(filesLabel)
        hboxfiles.addWidget(self.listWidget)
        
        # Analysis options
        self.min_event_length_edit = QtGui.QLineEdit()
        self.min_event_length_edit.setText('10.0')
        self.min_event_length_edit.setValidator(QtGui.QDoubleValidator(0, 1e12, 5))
        self.max_event_length_edit = QtGui.QLineEdit()
        self.max_event_length_edit.setText('1000.0')
        self.max_event_length_edit.setValidator(QtGui.QDoubleValidator(0, 1e12, 5))
        self.fixed_analysis_options = QtGui.QFormLayout()
        self.fixed_analysis_options.addRow('Data Files:', self.listWidget)
        self.fixed_analysis_options.addRow('Min Event Length [us]:', self.min_event_length_edit)
        self.fixed_analysis_options.addRow('Max Event Length [us]:', self.max_event_length_edit)
        
        # Baseline options
        baseline_options = QtGui.QStackedLayout()
        self.baseline_type_combo = QtGui.QComboBox()
        self.baseline_type_combo.addItems(('Adaptive', 'Fixed'))
        self.baseline_type_combo.activated.connect(baseline_options.setCurrentIndex)
        
        adaptive_options_layout = QtGui.QFormLayout()
        self.filter_parameter_edit = QtGui.QLineEdit()
        self.filter_parameter_edit.setValidator(QtGui.QDoubleValidator(0, 10, 5))
        self.filter_parameter_edit.setText('0.93') 
        adaptive_options_layout.addRow('Filter Parameter \'a\':', self.filter_parameter_edit)
        # need to cast to widget to add to QStackedLayout
        adaptive_options_widget = QtGui.QWidget()
        adaptive_options_widget.setLayout(adaptive_options_layout)
        
        fixed_options_layout = QtGui.QFormLayout()
        self.baseline_current_edit = QtGui.QLineEdit()
        self.baseline_current_edit.setValidator(QtGui.QDoubleValidator(-9999,9999,9))
        self.baseline_current_edit.setText('0.0')
        fixed_options_layout.addRow('Baseline Current:', self.baseline_current_edit)
        fixed_options_widget = QtGui.QWidget()
        fixed_options_widget.setLayout(fixed_options_layout)
        
        baseline_options.addWidget(adaptive_options_widget)
        baseline_options.addWidget(fixed_options_widget)
        
        
        baseline_form = QtGui.QFormLayout()
        baseline_form.addRow('Baseline Type:', self.baseline_type_combo)
        
        # Threshold options
        threshold_options = QtGui.QStackedLayout()
        self.threshold_type_combo = QtGui.QComboBox()
        self.threshold_type_combo.addItem('Noise Based')
        self.threshold_type_combo.addItem('Absolute Change')
        self.threshold_type_combo.addItem('Percentage Change')
        self.threshold_type_combo.activated.connect(threshold_options.setCurrentIndex)
        
        threshold_form = QtGui.QFormLayout()
        self.threshold_direction_combo = QtGui.QComboBox()
        self.threshold_direction_combo.addItems(('Both', 'Positive', 'Negative'))
        threshold_form.addRow('Threshold Direction:', self.threshold_direction_combo)
        threshold_form.addRow('Threshold Type:', self.threshold_type_combo)
        
        noise_based_options_layout = QtGui.QFormLayout()
        self.threshold_stdev_start = QtGui.QLineEdit()
        self.threshold_stdev_start.setValidator(QtGui.QDoubleValidator(-9999,9999,4))
        self.threshold_stdev_start.setText('5.0')
        noise_based_options_layout.addRow('Start StdDev:', self.threshold_stdev_start)
        self.threshold_stdev_end = QtGui.QLineEdit()
        self.threshold_stdev_end.setValidator(QtGui.QDoubleValidator(-9999,9999,4))
        self.threshold_stdev_end.setText('1.0')
        noise_based_options_layout.addRow('End StdDev:', self.threshold_stdev_end)
        
        absolute_drop_options_layout = QtGui.QFormLayout()
        self.absolute_change_edit = QtGui.QLineEdit()
        self.absolute_change_edit.setValidator(QtGui.QDoubleValidator(-9999,9999,9))
        self.absolute_change_edit.setText('0.1')
        absolute_drop_options_layout.addRow('Absolute Change [uA]:', self.absolute_change_edit)
        
        percentage_change_options_layout = QtGui.QFormLayout()
        self.percentage_change_edit = QtGui.QLineEdit()
        self.percentage_change_edit.setValidator(QtGui.QDoubleValidator(0,9999,5))
        self.percentage_change_edit.setText('10.0')
        percentage_change_options_layout.addRow('Percent Change:', self.percentage_change_edit)
        
        noise_based_options = QtGui.QWidget()
        noise_based_options.setLayout(noise_based_options_layout)
        
        absolute_drop_options = QtGui.QWidget()
        absolute_drop_options.setLayout(absolute_drop_options_layout)
        
        percentage_change_options_widget = QtGui.QWidget()
        percentage_change_options_widget.setLayout(percentage_change_options_layout)
        
        threshold_options.addWidget(noise_based_options)
        threshold_options.addWidget(absolute_drop_options)
        threshold_options.addWidget(percentage_change_options_widget)
        
        
        hbox = QtGui.QHBoxLayout()
        
        for w in [  self.analyze_button, self.stop_analyze_button]:
            hbox.addWidget(w)
            hbox.setAlignment(w, QtCore.Qt.AlignVCenter)
        
        
        # Left vertical layout with settings
        vbox_left = QtGui.QVBoxLayout()
        vbox_left.addLayout(self.fixed_analysis_options)
        vbox_left.addLayout(baseline_form)
        vbox_left.addLayout(baseline_options)
        vbox_left.addLayout(threshold_form)
        vbox_left.addLayout(threshold_options)
        vbox_left.addLayout(hbox)
        
        # Right vertical layout with plots and stuff
        vbox_right = QtGui.QVBoxLayout()
        vbox_right.addWidget(self.plot)
        vbox_right.addWidget(self.plot_concatevents)
        vbox_right.addWidget(self.tab_widget)

        # Layout holding everything        
        hbox_all = QtGui.QHBoxLayout()
        hbox_all.addLayout(vbox_left, 1)
        hbox_all.addLayout(vbox_right, 3)
        
        self.main_frame.setLayout(hbox_all)
        scrollArea.setWidget(self.main_frame)
        self.setCentralWidget(scrollArea)
        
        
    def create_status_bar(self):
        '''
        Creates filter_parameter status bar with filter_parameter text widget.
        '''
        self.status_text = QtGui.QLabel("")
        self.statusBar().addWidget(self.status_text, 1)
    
    def create_menu(self):
        '''
        Creates File menu with Open
        '''
        self.file_menu = self.menuBar().addMenu("&File")
        
        load_file_action = self.create_action("&Open",
            shortcut="Ctrl+O", slot=self.open_files,
            tip="Open data Files")
        quit_action = self.create_action("&Quit", slot=self.close,
            shortcut="Ctrl+Q", tip="Close the application")
        
        self.add_actions(self.file_menu,
            (load_file_action, None, quit_action))
        
#         self.help_menu = self.menuBar().addMenu("&Help")
#         about_action = self.create_action("&About", 
#             shortcut='F1', slot=self.on_about, 
#             tip='About the demo')
#         
#         self.add_actions(self.help_menu, (about_action,))

    def add_actions(self, target, actions):
        for action in actions:
            if action is None:
                target.addSeparator()
            else:
                target.addAction(action)

    def create_action(self, text, slot=None, shortcut=None,
                        icon=None, tip=None, checkable=False,
                        signal="triggered()"):
        action = QtGui.QAction(text, self)
        if icon is not None:
            action.setIcon(QtGui.QIcon(":/%s.png" % icon))
        if shortcut is not None:
            action.setShortcut(shortcut)
        if tip is not None:
            action.setToolTip(tip)
            action.setStatusTip(tip)
        if slot is not None:
            self.connect(action, QtCore.SIGNAL(signal), slot)
        if checkable:
            action.setCheckable(True)
        return action
    
#     def plotData(self, data, axes, plot_range='all'):
    def plotData(self, plot_options):
        '''
        Plots waveform in datadict
        Pass in plot_options, filter_parameter dictionary with 'plot_range', 'axes', and 'datadict'
        pass in Data dictionary, with data at 'data' and sample rate at 'SETUP_ADCSAMPLERATE'
        Can pass in range as [start,stop], or 'all' for 0:n
        '''
        axes = plot_options['axes']
        if axes is None:
            axes = self.plot
        # Read the first file, store data in dictionary
        data = plot_options['datadict']['data']
        sample_rate = plot_options['datadict']['SETUP_ADCSAMPLERATE'][0][0]
        plot_range = plot_options['plot_range']
    
        n = len(data)
#         # If problem with input, just plot all the data
        if plot_range == 'all' or len(plot_range) != 2 or plot_range[1] <= plot_range[0]:
            plot_range = [0, n]
        else:  # no problems!
            n = plot_range[1] - plot_range[0]
    
        axes.clear()
        Ts = 1 / sample_rate
        
        times = arange(Ts * plot_range[0], Ts * plot_range[1], Ts)
        
        curve = Qwt.QwtPlotCurve("Current Trace")
        curve.setData(times, data[plot_range[0]:plot_range[1]])
        curve.attach(axes)
        axes.replot()
        # Set the top of the zoom stack to current plot, if wanted.  False means no replot (we just plotted it!)
        if 'set_zoom_base' in plot_options:
            if plot_options['set_zoom_base'] == True:
                self.zoomer.setZoomBase(False)
        else:
            self.zoomer.setZoomBase(False)
            
    def plotEventOnMainPlot(self, event):
        '''
        Adds an event to the main current trace plot.  
        Pass in filter_parameter dictionary with 'event_data', 'sample_rate', 'event_start'
        '''
        if not 'raw_data' in event or not 'sample_rate' in event or not 'event_start' in event or not 'raw_points_per_side':
            print 'incorrectly called plotEventOnMainPlot.  Need \'raw_data\', \'sample_rate\', and \'event_start\'' 
            return
        data = event['raw_data']
        sample_rate = event['sample_rate']
        event_start = event['event_start']
        raw_points_per_side = event['raw_points_per_side']
        
        Ts = 1 / sample_rate
        
        times = arange(Ts * (event_start - raw_points_per_side), Ts * (event_start - raw_points_per_side + len(data) - 1), Ts)
        curve = Qwt.QwtPlotCurve('Event')
        curve.setPen(Qt.QPen(QtCore.Qt.green))
        curve.setData(times, data)
        curve.attach(self.plot)
        self.plot.replot()
        
    def on_analyze_stop(self):
        for w in self.threadPool:
            print w
            if isinstance(w, AnalyzeDataThread):
                w.terminate()
        self.stop_analyze_button.setEnabled(False)
        self.status_text.setText('Analyze aborted.')
            
    def on_analyze(self):
        '''
        Searches for events in the file that is currently highlighted in the files list.
        '''
        currItem = self.listWidget.currentItem()
        if currItem == None:
            return
        
        parameters = self.get_current_analysis_parameters()
        if 'error' in parameters:
            self.status_text.setText(parameters['error'])
            return
        
        # Add axes and the filename to the parameters
        parameters['axes'] = self.plot_event_zoomed
        parameters['filename'] = str(currItem.text())
        
        print parameters
        
        self.status_text.setText('Event Count: 0 Percent Done: 0')
        
        # Start analyzing data in new thread.
        thread = AnalyzeDataThread(parameters)
        self.threadPool.append(thread)
        self.connect(self.threadPool[len(self.threadPool) - 1], QtCore.SIGNAL('_analyze_data_thread_callback(PyQt_PyObject)'), self._analyze_data_thread_callback)
        self.threadPool[len(self.threadPool) - 1].start()
        
        self.stop_analyze_button.setEnabled(True)
        
        # Clear the concatenated_events plot and the single event plot
        self.plot_concatevents.clear()
        self.plot_event_zoomed.clear()
        
    def get_current_analysis_parameters(self):
        '''
        Returns filter_parameter dictionary holding the current analysis parameters set by the user.  Returns an entry 'error' if there were
        invalid inputs.
        '''
        parameters = {}
        # Get Min_event length in microseconds
        try:
            parameters['min_event_length'] = float(self.min_event_length_edit.text())
        except ValueError:
            parameters['error'] = 'Could not read float from Min Event Length text box.  Please fix.'
            return parameters
        # Get Max Event Length in microseconds
        try:
            parameters['max_event_length'] = float(self.max_event_length_edit.text())
        except ValueError:
            parameters['error'] = 'Could not read float from Max Event Length text box.  Please fix.'
            return parameters
        if parameters['min_event_length'] >= parameters['max_event_length']:
            parameters['max_event_length'] = 'Min Event Length is greater than Max Event Length.  Please fix.'
            return parameters
        
        parameters['baseline_type'] = str(self.baseline_type_combo.currentText())
        if parameters['baseline_type'] == 'Adaptive':
            try:
                parameters['filter_parameter'] = float(self.filter_parameter_edit.text())
            except ValueError:
                parameters['error'] = 'Could not read float from Filter Parameter text box.  Please fix.'
                return
        elif parameters['baseline_type'] == 'Fixed':
            try:
                parameters['baseline_current'] = float(self.baseline_current_edit.text())
            except ValueError:
                parameters['error'] = 'Could not read float from Baseline Current text box.  Please fix.'
               
        parameters['threshold_direction'] = str(self.threshold_direction_combo.currentText()) 
        parameters['threshold_type'] = str(self.threshold_type_combo.currentText())
        if parameters['threshold_type'] == 'Noise Based':
            try:
                parameters['start_stddev'] = float(self.threshold_stdev_start.text())
            except ValueError:
                parameters['error'] = 'Could not read float from Start StdDev text box.  Please fix.'
            try:
                parameters['end_stddev'] = float(self.threshold_stdev_end.text())
            except ValueError:
                parameters['error'] = 'Could not read float from End StdDev text box.  Please fix.'
        elif parameters['threshold_type'] == 'Absolute Change':
            try:
                parameters['absolute_change'] = float(self.absolute_change_edit.text())
            except ValueError:
                parameters['error'] = 'Could not read float from Absolute Change.  Please fix.'
        elif parameters['threshold_type'] == 'Percentage Change':
            try:
                parameters['percent_change'] = float(self.percentage_change_edit.text())
            except ValueError:
                parameters['error'] = 'Could not read float from Percent Change text box.  Please fix.'
        
        return parameters
        
        
        
        
    def _analyze_data_thread_callback(self, results):
        if 'status_text' in results:
            self.status_text.setText(results['status_text'])
        if 'event' in results:
            self.plotEventOnMainPlot(results['event'])
        if 'plot_options' in results:
            self.plotData(results['plot_options'])
        if 'done' in results:
            if results['done']:
                self.stop_analyze_button.setEnabled(False)
        
# def plotSpectrum(data, rate):
#     n = len(data)
#     k = np.arange(n)
#     T = n / rate
#     frq = k / T  # Two sides frequency range
#     frq = frq[range(n / 2)]  # one side frequency range
#     
#     Y = fft(data) / n  # fft and normalization
#     Y = Y[range(n / 2)]
#     
#     decimated = frq
#     if len(frq) > 1000000:
#         decimated = signal.decimate(Y, int(len(data) / 1000000))
#     t = arange(frq[0], frq[len(frq) - 1], (frq[len(frq) - 1] - frq[0]) / len(decimated))
#     
#     plt.plot(t, decimated, 'r')
#     plt.xlim([frq[0], frq[n / 2 - 1]])
#     plt.xlabel('Freq (Hz)')
#     plt.ylabel('|Y(freq)|')


def main():
    
    app = QtGui.QApplication(sys.argv)
    ex = MyApp()
    ex.show()
    app.exec_()
    sys.exit()


if __name__ == '__main__':
    main()

